class LRUCache {
    
    int capacity;
    int count;
    HashMap<Integer, Node> map = new HashMap<>();
    Node head, tail;
    public LRUCache(int capacity) {
        this.capacity = capacity;
        map = new HashMap<>();
        head = new Node(0, 0);
        tail = new Node(0, 0);
        head.next = tail;
        tail.pre = head;
        head.pre = null;
        tail.next = null;
    }
    
    //need to remove node from previous position and add it to head
    public int get(int key) {
        if (map.get(key) != null) {
            Node curr = map.get(key);
            removeNode(curr);
            addNodeToHead(curr);
            return curr.value;
        } 
            return -1;
    }
        
    public void put(int key, int value) {
        if (map.get(key) == null) {
            Node node = new Node(key, value);
            addNodeToHead(node);
            map.put(key, node);
            if (map.size() > this.capacity) {
                //pop the tail
                Node pre = tail.pre;
                removeNode(tail.pre);
                map.remove(pre.key);  
            }
            
        } else {
            Node curr = map.get(key);
            removeNode(curr);
            curr.value = value;
            addNodeToHead(curr);
            map.put(key, curr);
        }
    }
        
    
    //add node right after head
    private void addNodeToHead(Node node) {
        Node next = head.next;
        node.next = next;
	    node.next.pre = node;
	    node.pre = head;
	    head.next = node;    
    }
    
    //remove node
    private void removeNode(Node node) {
        node.pre.next = node.next;
        node.next.pre = node.pre;  
    }
    
}
    class Node {
        int key;
        int value;
        Node pre;
        Node next;
        public Node (int key, int value) {
            this.key = key;
            this.value = value;
        }
    }

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
