class Solution {
    public int[][] kClosest(int[][] points, int K) {
        //sort
        int nr = points.length;
        int nc = points[0].length;
        int[][] result = new int[K][2];
        Map<Integer, List<Integer>> map = new HashMap<>();
        for (int i = 0; i < points.length; i++) {
            int index = i;
            int value = points[i][0] * points[i][0] + points[i][1] * points[i][1];
            List<Integer> list = map.getOrDefault(value, new ArrayList<Integer>());
            list.add(index);
            map.put(value,list);
        }
        ArrayList<Integer> list = new ArrayList<>();
        list.addAll(map.keySet());
        Collections.sort(list);
        int count = 0; 
        
        for (int key: list) { 
             for (int i = 0; i < map.get(key).size(); i++) {
                 if (count < K) {
                 result[count][0] = points[map.get(key).get(i)][0];
                 result[count][1] = points[map.get(key).get(i)][1];
                 count++;
                 }

             }
        }
        return result;

        
    }
}

class Solution {
    public int[][] kClosest(int[][] points, int K) {
        //define pq to save indexes with order 
        PriorityQueue<int[]> queue = new PriorityQueue<int[]>((p1, p2) -> p2[0] * p2[0] + p2[1] * p2[1] - p1[0] * p1[0] - p1[1] * p1[1]);
        for (int[] p: points) {
            queue.add(p);  
            if (queue.size() > K) {
                queue.poll();
            }
        }
        int[][] result = new int[K][2];
        while (K > 0) {
           result[--K] = queue.poll();

        }
        
        return result;
  
    }
